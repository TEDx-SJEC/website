generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String    @default("PARTICIPANT")
  accounts      Account[]
  sessions      Session[]
  forms         Form[]

  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  createdReferrals Referral[] @relation("createdByUser")
  usedReferrals    Referral[] @relation("usedByUser")
  Payment          Payment[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Referral {
  id                 String   @id @default(cuid())
  code               String   @unique
  discountPercentage String   @default("20") @map("discount_percentage")
  createdById        String   @map("createdby_id")
  usedById           String?  @map("usedby_id")
  isUsed             Boolean  @default(false)
  created_at         DateTime @default(now())

  createdBy User   @relation("createdByUser", fields: [createdById], references: [id], onDelete: Cascade)
  usedBy    User?  @relation("usedByUser", fields: [usedById], references: [id])
  forms     Form[]
}

model Form {
  id             String   @id @default(cuid())
  name           String
  usn            String?
  email          String
  contact        String?
  designation    String?
  foodPreference String   @default("veg") @map("food_preference")
  photo          String   @map("photo_url") // URL of the photo uploaded by the participan
  collegeIdCard  String?  @map("college_id_card")
  entityName     String?  @map("entity_name")
  referralUsed   String?  @map("referral_used")
  paidAmount     Float    @map("paid_amount")
  createdById    String   @map("created_by_id")
  created_at     DateTime @default(now())
  //registrationEmailSent Boolean? @default(false) @map("registration_email_sent")

  user     User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  referral Referral? @relation(fields: [referralUsed], references: [code])
  Payment  Payment[]
}

model Payment {
  signature         String?
  userId            String   @map("user_id")
  amount            Float
  orderCreationId   String   @map("order_creation_id")
  razorpayPaymentId String   @id @map("razorpay_payment_id")
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  formId String? @map("form_id")
  Form   Form?   @relation(fields: [formId], references: [id])
}

model SjecUser {
  id    String @id @default(cuid())
  name  String
  email String @unique

  @@map("sjec_user")
}
